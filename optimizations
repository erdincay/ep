Alles wird immer 1000 mal ausgefuehrt, oprofile summiert die ergebnisse automatisch

0.) Urzustand:
codesize: 175555
-------------------------------------------------------------------------------
3050495  74.2407  transitions
  3050495  100.000  transitions [self]
-------------------------------------------------------------------------------
410243    9.9842  optimize_rewrite
  410243   100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
205597    5.0037  cost_codesize
  205597   100.000  cost_codesize [self]
-------------------------------------------------------------------------------
145182    3.5333  init_waypoints
  145182   100.000  init_waypoints [self]
-------------------------------------------------------------------------------
93162     2.2673  is_relocatable
  93162    100.000  is_relocatable [self]
-------------------------------------------------------------------------------
92836     2.2594  lookup_super
  92836    100.000  lookup_super [self]
-------------------------------------------------------------------------------
55595     1.3530  hash_super
  55595    100.000  hash_super [self]
-------------------------------------------------------------------------------
34782     0.8465  printinst
  34782    100.000  printinst [self]
-------------------------------------------------------------------------------
20346     0.4952  main
  20346    100.000  main [self]
-------------------------------------------------------------------------------
676       0.0165  prepare_super_table
  676      100.000  prepare_super_table [self]
-------------------------------------------------------------------------------
8        1.9e-04  __libc_csu_init
  8        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
2        4.9e-05  _fini
  2        100.000  _fini [self]
-------------------------------------------------------------------------------
1        2.4e-05  __do_global_dtors_aux
  1        100.000  __do_global_dtors_aux [self]
-------------------------------------------------------------------------------
1        2.4e-05  frame_dummy
  1        100.000  frame_dummy [self]
-------------------------------------------------------------------------------

1.) -O3 statt -O0
es passiert offensichtliches mass inlining von funktionen
codesize: 194789
-------------------------------------------------------------------------------
1121706  92.6244  optimize_rewrite
  1121706  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
78016     6.4421  cost_codesize
  78016    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
11296     0.9328  main
  11296    100.000  main [self]
-------------------------------------------------------------------------------
7        5.8e-04  __libc_csu_init
  7        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.3e-05  _init
  1        100.000  _init [self]
-------------------------------------------------------------------------------

2.) -funroll-loops
compiler unrolling bringt in diesem fall leider nur einen Geschwindigkeitsverlust mit sich, insofern werden wir diese Optimierung nicht weiter uebernehmen
codesize: 196541
-------------------------------------------------------------------------------
1163755  92.6616  optimize_rewrite
  1163755  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
80994     6.4490  cost_codesize
  80994    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
11166     0.8891  main
  11166    100.000  main [self]
-------------------------------------------------------------------------------
3        2.4e-04  __libc_csu_init
  3        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.0e-05  _fini
  1        100.000  _fini [self]
-------------------------------------------------------------------------------`

3.) ersetze printf durch write
code wird kompakter allerdings nicht wirklich schneller
codesize: 194739
-------------------------------------------------------------------------------
1142731  92.5924  optimize_rewrite
  1142731  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
79109     6.4100  cost_codesize
  79109    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
12307     0.9972  main
  12307    100.000  main [self]
-------------------------------------------------------------------------------
4        3.2e-04  __libc_csu_init
  4        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.1e-05  frame_dummy
  1        100.000  frame_dummy [self]
-------------------------------------------------------------------------------

4.)
entfernen von assertions, verbessert codesize, sonst keine merklichen verbesserungen
codesize: 193879
-------------------------------------------------------------------------------
1154744  92.4972  optimize_rewrite
  1154744  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
80372     6.4379  cost_codesize
  80372    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
13288     1.0644  main
  13288    100.000  main [self]
-------------------------------------------------------------------------------
2        1.6e-04  __libc_csu_init
  2        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.0e-05  __do_global_ctors_aux
  1        100.000  __do_global_ctors_aux [self]
-------------------------------------------------------------------------------
1        8.0e-05  __do_global_dtors_aux
  1        100.000  __do_global_dtors_aux [self]
-------------------------------------------------------------------------------
1        8.0e-05  _start
  1        100.000  _start [self]
-------------------------------------------------------------------------------
1        8.0e-05  call_gmon_start
  1        100.000  call_gmon_start [self]
-------------------------------------------------------------------------------


5.)

sp05.c

typedef int Costfunc(int);
Costfunc *ss_cost =  /* cost function for optimize_bb */
cost_codesize;

dieser teil wurde übergangen und an den stellen, wo ss_cost eingesetzt war wurde 
direkt cost_codesize eingesetzt. Dies sollte einen großen vorteil bringen, da 
viele berechnungen eingespart werden.

6.)
sp06.c

// static int cost_codesize (int prim) (#
inline static int cost_codesize (int prim) __attribute__((always_inline)); 
inline static int cost_codesize (int prim) {
  return priminfos[prim].length;
}
//#)

Da diese Funktion nut einen wert zurück gibt, kann man den direkt auslesen und 
die Funktion vernachlässigen.
