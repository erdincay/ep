Alles wird immer 1000 mal ausgefuehrt, oprofile summiert die ergebnisse automatisch

0.) Urzustand:
codesize: 175555
-------------------------------------------------------------------------------
3050495  74.2407  transitions
  3050495  100.000  transitions [self]
-------------------------------------------------------------------------------
410243    9.9842  optimize_rewrite
  410243   100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
205597    5.0037  cost_codesize
  205597   100.000  cost_codesize [self]
-------------------------------------------------------------------------------
145182    3.5333  init_waypoints
  145182   100.000  init_waypoints [self]
-------------------------------------------------------------------------------
93162     2.2673  is_relocatable
  93162    100.000  is_relocatable [self]
-------------------------------------------------------------------------------
92836     2.2594  lookup_super
  92836    100.000  lookup_super [self]
-------------------------------------------------------------------------------
55595     1.3530  hash_super
  55595    100.000  hash_super [self]
-------------------------------------------------------------------------------
34782     0.8465  printinst
  34782    100.000  printinst [self]
-------------------------------------------------------------------------------
20346     0.4952  main
  20346    100.000  main [self]
-------------------------------------------------------------------------------
676       0.0165  prepare_super_table
  676      100.000  prepare_super_table [self]
-------------------------------------------------------------------------------
8        1.9e-04  __libc_csu_init
  8        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
2        4.9e-05  _fini
  2        100.000  _fini [self]
-------------------------------------------------------------------------------
1        2.4e-05  __do_global_dtors_aux
  1        100.000  __do_global_dtors_aux [self]
-------------------------------------------------------------------------------
1        2.4e-05  frame_dummy
  1        100.000  frame_dummy [self]
-------------------------------------------------------------------------------

1.) -O3 statt -O0
es passiert offensichtliches mass inlining von funktionen
codesize: 194789
-------------------------------------------------------------------------------
1121706  92.6244  optimize_rewrite
  1121706  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
78016     6.4421  cost_codesize
  78016    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
11296     0.9328  main
  11296    100.000  main [self]
-------------------------------------------------------------------------------
7        5.8e-04  __libc_csu_init
  7        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.3e-05  _init
  1        100.000  _init [self]
-------------------------------------------------------------------------------

2.) -funroll-loops
compiler unrolling bringt in diesem fall leider nur einen Geschwindigkeitsverlust mit sich, insofern werden wir diese Optimierung nicht weiter uebernehmen
codesize: 196541
-------------------------------------------------------------------------------
1163755  92.6616  optimize_rewrite
  1163755  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
80994     6.4490  cost_codesize
  80994    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
11166     0.8891  main
  11166    100.000  main [self]
-------------------------------------------------------------------------------
3        2.4e-04  __libc_csu_init
  3        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.0e-05  _fini
  1        100.000  _fini [self]
-------------------------------------------------------------------------------`

3.) ersetze printf durch write
code wird kompakter allerdings nicht wirklich schneller
codesize: 194739
-------------------------------------------------------------------------------
1142731  92.5924  optimize_rewrite
  1142731  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
79109     6.4100  cost_codesize
  79109    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
12307     0.9972  main
  12307    100.000  main [self]
-------------------------------------------------------------------------------
4        3.2e-04  __libc_csu_init
  4        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.1e-05  frame_dummy
  1        100.000  frame_dummy [self]
-------------------------------------------------------------------------------

4.)
entfernen von assertions, verbessert codesize, sonst keine merklichen verbesserungen
codesize: 193862
-------------------------------------------------------------------------------
1142426  92.8433  optimize_rewrite
  1142426  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
79086     6.4272  cost_codesize
  79086    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
8971      0.7291  main
  8971     100.000  main [self]
-------------------------------------------------------------------------------
2        1.6e-04  __do_global_dtors_aux
  2        100.000  __do_global_dtors_aux [self]
-------------------------------------------------------------------------------
2        1.6e-04  _init
  2        100.000  _init [self]
-------------------------------------------------------------------------------
1        8.1e-05  __do_global_ctors_aux
  1        100.000  __do_global_ctors_aux [self]
-------------------------------------------------------------------------------
1        8.1e-05  __libc_csu_init
  1        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------


5a.) wo->cost in eine temporaeren variable speichern, scheint nicht wirklich etwas zu bringen
codesize: 193982
-------------------------------------------------------------------------------
1149942  92.8966  optimize_rewrite
  1149942  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
78970     6.3795  cost_codesize
  78970    100.000  cost_codesize [self]
-------------------------------------------------------------------------------
8951      0.7231  main
  8951     100.000  main [self]
-------------------------------------------------------------------------------
5        4.0e-04  __libc_csu_init
  5        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
3        2.4e-04  __do_global_dtors_aux
  3        100.000  __do_global_dtors_aux [self]
-------------------------------------------------------------------------------
1        8.1e-05  _init
  1        100.000  _init [self]
-------------------------------------------------------------------------------
1        8.1e-05  call_gmon_start
  1        100.000  call_gmon_start [self]
-------------------------------------------------------------------------------

5.)

sp05.c
codesize: 194300

typedef int Costfunc(int);
Costfunc *ss_cost =  /* cost function for optimize_bb */
cost_codesize;

dieser teil wurde übergangen und an den stellen, wo ss_cost eingesetzt war wurde 
direkt cost_codesize eingesetzt. Dies sollte einen großen vorteil bringen, da 
viele berechnungen eingespart werden.

-------------------------------------------------------------------------------
1131087  99.0960  optimize_rewrite
  1131087  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
10312     0.9034  main
  10312    100.000  main [self]
-------------------------------------------------------------------------------
3        2.6e-04  __libc_csu_init
  3        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.8e-05  __do_global_ctors_aux
  1        100.000  __do_global_ctors_aux [self]
-------------------------------------------------------------------------------
1        8.8e-05  _fini
  1        100.000  _fini [self]
-------------------------------------------------------------------------------
1        8.8e-05  frame_dummy
  1        100.000  frame_dummy [self]
-------------------------------------------------------------------------------

6.)
sp06.c
codesize: 193948

// static int cost_codesize (int prim) (#
inline static int cost_codesize (int prim) __attribute__((always_inline)); 
inline static int cost_codesize (int prim) {
  return priminfos[prim].length;
}
//#)

Da diese Funktion nut einen wert zurück gibt, kann man den direkt auslesen und 
die Funktion vernachlässigen.

-------------------------------------------------------------------------------
1135993  99.1756  optimize_rewrite      
  1135993  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
9428      0.8231  main                  
  9428     100.000  main [self]         
-------------------------------------------------------------------------------
7        6.1e-04  __libc_csu_init       
  7        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
4        3.5e-04  _start                
  4        100.000  _start [self]       
-------------------------------------------------------------------------------
3        2.6e-04  __do_global_dtors_aux 
  3        100.000  __do_global_dtors_aux [self]
-------------------------------------------------------------------------------
1        8.7e-05  __do_global_ctors_aux 
  1        100.000  __do_global_ctors_aux [self]
-------------------------------------------------------------------------------

7.)
sp07.c
codesize: 194084
verbesserung der for-schleife in main

-------------------------------------------------------------------------------
1121345  99.4149  optimize_rewrite
  1121345  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
6596      0.5848  main
  6596     100.000  main [self]
-------------------------------------------------------------------------------
3        2.7e-04  __libc_csu_init     
  3        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.9e-05  __do_global_ctors_aux
  1        100.000  __do_global_ctors_aux [self]
-------------------------------------------------------------------------------

8.)
sp08.c
codesize: 194116
Zusammenfassen von is_relocateable(X) in optimize_rewrite.
Halbiert die Aufrufe von is_relocateable

-------------------------------------------------------------------------------
1134284  99.4212  optimize_rewrite
  1134284  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
6598      0.5783  main
  6598     100.000  main [self]
-------------------------------------------------------------------------------
3        2.6e-04  __libc_csu_init
  3        100.000  __libc_csu_init [self]
-------------------------------------------------------------------------------
1        8.8e-05  __do_global_ctors_aux
  1        100.000  __do_global_ctors_aux [self]
-------------------------------------------------------------------------------
1        8.8e-05  _init
  1        100.000  _init [self]
-------------------------------------------------------------------------------

9.)
sp09.c
codesize: 193088

assertions aus sp08 entfernt, bringt kleinere codesize sonst keine vorteile

10.)

sp10.c
codesize: 193136

if (wo->cost == INF_COST)
      continue;
    jcost = wo->cost + priminfos[s].length;
    if (jcost <= wi->cost) {
      wi->cost = jcost;
      wi->inst = s;
      wi->relocatable = wo->relocatable;
      wi->no_transition = 0;
      /* if (ss_greedy) wi->cost = wo->cost ? */
    }

wird in der funktion optimize_rewrite und transitions ersetzt durch

if (wo->cost != INF_COST && (jcost = wo->cost + priminfos[s].length) <= wi->cost){
            wi->cost = jcost;
            wi->inst = s;
            wi->relocatable = is_relocable;
            wi->no_transition = no_transition;
            /* if (ss_greedy) wi->cost = wo->cost ? */
          }

wieviel das jetzt bringt, oder ob das die ganze sache verschlechtert weiß ich noch nicht.
Außerdem kann man nach meiner erkenntnis die zwei Bedinungen in der if einfach vertauschen.
Welche variante jetzt die effektivere ist, ob wo->cost != INF_COST vorne stehen soll oder
(jcost = wo->cost + priminfos[s].length) <= wi->cost wäre einfach mal auszuprobieren.

-------------------------------------------------------------------------------
1160485  99.4056  1636071  99.5137  optimize_rewrite
  1160485  100.000  1636071  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
6930      0.5936  7994      0.4862  main
  6930     100.000  7994     100.000  main [self]
-------------------------------------------------------------------------------
5        4.3e-04  0              0  __libc_csu_init
  5        100.000  0              0  __libc_csu_init [self]
-------------------------------------------------------------------------------
2        1.7e-04  0              0  _start
  2        100.000  0              0  _start [self]
-------------------------------------------------------------------------------
1        8.6e-05  1        6.1e-05  __do_global_dtors_aux
  1        100.000  1        100.000  __do_global_dtors_aux [self]
-------------------------------------------------------------------------------
1        8.6e-05  0              0  frame_dummy
  1        100.000  0              0  frame_dummy [self]
-------------------------------------------------------------------------------


11.) 
Ich habe -fno-fomit-frame-pointer in das buildscript eingebaut weil ich schauen
wollte wie sich das Programm dabei verhaelt - eigentlich sollte es langsamer
werden, da die Registerbelegung unguenstiger wird. Jedoch wird das Programm
schneller. Weiters habe ich ausprobiert wie sich die von wiesel vorgeschlagene
Optimierung aus 10 verhaelt wenn man die Ausdruecke bei dem logischen and
vertauscht - hat aber den generierten Code nicht verbessert.

Weiters wird puts statt printf verwendet und das super_table_entry struct
veraendert (dadurch verbessert sich das padding), dies bringt aber auch nur
marginale Vorteile.

codesize: 193485

-------------------------------------------------------------------------------
1132404  99.4006  1664292  99.5130  optimize_rewrite
  1132404  100.000  1664292  100.000  optimize_rewrite [self]
-------------------------------------------------------------------------------
6825      0.5991  8143      0.4869  main
  6825     100.000  8143     100.000  main [self]
-------------------------------------------------------------------------------
3        2.6e-04  0              0  __libc_csu_init
  3        100.000  0              0  __libc_csu_init [self]
-------------------------------------------------------------------------------
0              0  1        6.0e-05  __do_global_ctors_aux
  0              0  1        100.000  __do_global_ctors_aux [self]
-------------------------------------------------------------------------------
0              0  1        6.0e-05  _init
  0              0  1        100.000  _init [self]
-------------------------------------------------------------------------------
